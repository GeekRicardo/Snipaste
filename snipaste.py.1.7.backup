import tkinter
import tkinter.filedialog
import os
# import pdb
import time
from aip import AipOcr
from PIL import ImageEnhance
import platform
osName = platform.system()
tail = ''   #换行尾部符
if(osName == 'Windows'):
    tail = '\r\n'
    from PIL import ImageGrab
    # 设置任务栏图标
    import ctypes
    myappid = 'Ricardo.Capture2Text.subproduct.V1.02'
    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)
elif(osName == 'Linux'):
    tail = '\n'
    import pyscreenshot as ImageGrab
elif(osName == 'Darwin'):
    pass

import pyxhook
import sys


root = tkinter.Tk()
# 指定窗口的大小
root.geometry('300x50+1500+400')
# 不允许改变窗口大小
root.resizable(False, False)
root.title("OCR")
# root.iconbitmap('./icon.ico')
# root.tk.call('wm', 'iconphoto', root._w, tk.PhotoImage('icon.ico'))
snip_box = []  # 前面识别的结果窗口
from PIL import ImageTk, Image




class MyCapture:

    def __init__(self, png):
        # 变量X和Y用来记录鼠标左键按下的位置
        self.X = tkinter.IntVar(value=0)
        self.Y = tkinter.IntVar(value=0)
        self.sel = False
        # 屏幕尺寸
        self.screenWidth = root.winfo_screenwidth()
        self.screenHeight = root.winfo_screenheight()
        # 创建顶级组件容器
        self.top = tkinter.Toplevel(
             width=self.screenWidth, height=self.screenHeight)
        # 不显示最大化、最小化按钮
        self.top.overrideredirect(True)
        self.canvas = tkinter.Canvas(
            self.top,
            bg='white',
            width=self.screenWidth,
            height=self.screenHeight)
        # 显示全屏截图，在全屏截图上进行区域截图
        self.image = tkinter.PhotoImage(file=png)
        self.canvas.create_image(
            self.screenWidth // 2, self.screenHeight // 2, image=self.image)
        self.canvas.pack()

        def esc(event):
            self.top.destroy()
        self.top.bind('<Escape>', esc)

        # 鼠标左键按下的位置
        def onLeftButtonDown(event):
            # pdb.set_trace()
            self.X.set(event.x)
            self.Y.set(event.y)
            # 开始截图
            self.sel = True
        self.canvas.bind('<Button-1>', onLeftButtonDown)

        # 鼠标左键移动，显示选取的区域
        def onLeftButtonMove(event):
            # pdb.set_trace()
            global lastDraw, r, c
            try:
                # 删除刚画完的图形，要不然鼠标移动的时候是黑乎乎的一片矩形
                self.canvas.delete(lastDraw)
                self.canvas.delete(r)
                self.canvas.delete(c)
            except Exception as e:
                pass
            # 没有点击左键时绘制十字线
            r = self.canvas.create_line(
                0, event.y, self.screenWidth, event.y, fill='white')
            c = self.canvas.create_line(
                event.x, 0, event.x, self.screenHeight, fill='white')
            if not self.sel:
                # print(event.x, event.y, self.screenWidth, self.screenHeight)
                pass
            else:
                lastDraw = self.canvas.create_rectangle(
                    self.X.get(),
                    self.Y.get(),
                    event.x, event.y,
                    outline='orange')
                # print(event.x, event.y, self.screenWidth, self.screenWidth)
        self.canvas.bind('<B1-Motion>', onLeftButtonMove)

        def onMouseMove(event):
            # 不点击时的鼠标移动，绘制十字线
            global r, c
            try:
                # 删除刚画完的图形，要不然鼠标移动的时候是黑乎乎的一片矩形
                self.canvas.delete(r)
                self.canvas.delete(c)
            except Exception as e:
                pass
            # 没有点击左键时绘制十字线
            r = self.canvas.create_line(
                0, event.y, self.screenWidth, event.y, fill='white')
            c = self.canvas.create_line(
                event.x, 0, event.x, self.screenHeight, fill='white')
        self.canvas.bind('<Motion>', onMouseMove)

        def onEscPressd(event):
            self.top.destroy()
        self.canvas.bind('<Cancel>', onEscPressd)

        # 获取鼠标左键抬起的位置，保存区域截图
        def onLeftButtonUp(event):
            self.sel = False
            try:
                self.canvas.delete(lastDraw)
            except Exception as e:
                pass
            time.sleep(0.1)
            # 考虑鼠标左键从右下方按下而从左上方抬起的截图
            left, right = sorted([self.X.get(), event.x])
            top, bottom = sorted([self.Y.get(), event.y])

            self.width, self.height = right - left, bottom - top 
            self.x, self.y = left, top

            pic = ImageGrab.grab((left + 1, top + 1, right, bottom))
            # 关闭顶级容器
            self.top.destroy()
            # 弹出保存截图对话框
            # fileName = tkinter.filedialog.asksaveasfilename(title='保存截图',
            # filetypes=[('image','*.jpg *.png')])
            if pic:
                pic.save('./temp.gif')
                # 关闭当前窗口
                # self.top.destroy()
        self.canvas.bind('<ButtonRelease-1>', onLeftButtonUp)
        self.canvas.pack(fill=tkinter.BOTH, expand=tkinter.YES)

    def draw(self):
        if(self.canvas):
            # self.canvas.destroy()
            pass
        self.zoom_width = int(self.width * self.zoom)
        self.zoom_height = int(self.height  * self.zoom)
        self.canvas['width'] = self.zoom_width
        self.canvas['height'] = self.zoom_height
        self.img = ImageTk.PhotoImage(Image.open("./temp.gif").resize((self.zoom_width, self.zoom_height),Image.ANTIALIAS))
        self.canvas.create_image(self.zoom_width // 2 , self.zoom_height // 2 , image=self.img)
        self.canvas.pack()
    
    def show(self):
        self.zoom = 1
        self.snip_top = tkinter.Toplevel(width=self.width - 1, height=self.height - 1)
        self.snip_top.overrideredirect(True)
        
        self.canvas = tkinter.Canvas(self.snip_top, bg='white', width=self.width, height=self.height)
        self.draw()
        self.snip_top.geometry("+%s+%s" % (self.x, self.y))


        def _on_move( event):
            # self.root_x/y  窗口左上角相对屏幕左上角的距离
            offset_x = event.x_root - self.root_x
            offset_y = event.y_root - self.root_y
            
            abs_x = self.abs_x + offset_x
            abs_y = self.abs_y + offset_y

            # if self.width and self.height:
            #     geo_str = "%sx%s+%s+%s" % (self.width, self.height,
            #                                abs_x,
            #                                abs_y)
            # else:
            geo_str="+%s+%s" % (abs_x, abs_y)
            self.snip_top.geometry(geo_str)
        self.snip_top.bind('<B1-Motion>', _on_move)

        def _on_tap(event):
            self.root_x, self.root_y=event.x_root, event.y_root
            self.abs_x, self.abs_y=self.snip_top.winfo_x(), self.snip_top.winfo_y()
        self.snip_top.bind("<Button-1>", _on_tap)

        def zoom_up(event):
            self.zoom += 0.1 
            # self.width *= self.zoom
            # self.height *= self.zoom
            self.draw()
            self.snip_top.geometry('%sx%s' % (int(self.width * self.zoom), int(self.height * self.zoom)))
        self.snip_top.bind('<Button-4>', zoom_up)
        def zoom_down(event):
            self.zoom -= 0.1 
            self.draw()
            self.snip_top.geometry('%sx%s' % (int(self.width * self.zoom), int(self.height * self.zoom)))
        self.snip_top.bind('<Button-5>', zoom_down)
        
        def quit(event):
            self.snip_top.destroy()
            root.state('normal')
        self.snip_top.bind('<Double-Button-1>', quit)

# new_hook=pyxhook.HookManager()
keys = ['Control_L', 'Alt_L', 'f']
# 监听键盘
ctrl , alt, f, cap = False, False, False, False
def onkeypress(e):
    global ctrl, alt, f, cap
    if(cap):
        buttonCaptureClick()
        ctrl, alt, f, cap = False, False, False,False
    k = e.Key
    if(k in keys):
        if(k == keys[0]):
            ctrl = True
            print('ctrl')
            return
        if(ctrl == True and k == keys[1]):
            alt = True
            print('ctrl-alt')
            return
        else:
            ctrl = False
            print('ctrl - no alt')
        if(alt == True and k == keys[2]):
            f = True
            cap = True
            print('capture')
        else:
            ctrl , alt, f = False, False, False
    else:
        ctrl , alt, f = False, False, False
def onkeyup(e):
    global ctrl, alt, f
    k = e.Key
    if(k in keys):
        if(k == keys[0]):
            ctrl = False
        if(k == keys[1]):
            alt = False
        if(k == keys[2]):
            f = False


# new_hook.KeyDown=onkeypress
# new_hook.HookKeyboard()
# new_hook.start()

# 开始截图


def buttonCaptureClick():
    # 最小化主窗口
    root.state('icon')
    time.sleep(0.1)
    filename = 'temp.gif'
    im = ImageGrab.grab()
    im = ImageEnhance.Brightness(im).enhance(0.8)
    im.save(filename)
    im.close()
    # 显示全屏幕截图
    w = MyCapture(filename)
    snip_box.append(w)
    buttonCapture.wait_window(w.top)
    # pdb.set_trace()
    # result = w.getText()
    w.show()
    # printresult(result)
    # 截图结束，恢复主窗口，并删除临时的全屏幕截图文件





def key(event):
    buttonCaptureClick()
root.bind('<Control-Alt-f>', key)
def quit(event):
    # new_hook.cancel()
    exit(0)
root.bind('<Double-Button-1>', quit)

buttonCapture = tkinter.Button(root, text='截图', command=buttonCaptureClick)
buttonCapture.place(x=110, y=10, width=80, height=30)
# 启动消息主循环
try:
    
    buttonCaptureClick()
    root.mainloop()
except Exception as e:
    root.destroy()
    # new_hook.stop()
